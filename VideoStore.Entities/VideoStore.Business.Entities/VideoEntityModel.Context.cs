//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace VideoStore.Business.Entities
{
    public partial class VideoStoreEntityModelContainer : ObjectContext
    {
        public const string ConnectionString = "name=VideoStoreEntityModelContainer";
        public const string ContainerName = "VideoStoreEntityModelContainer";
    
        #region Constructors
    
        public VideoStoreEntityModelContainer()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public VideoStoreEntityModelContainer(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public VideoStoreEntityModelContainer(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<Delivery> Deliveries
        {
            get { return _deliveries  ?? (_deliveries = CreateObjectSet<Delivery>("Deliveries")); }
        }
        private ObjectSet<Delivery> _deliveries;
    
        public ObjectSet<Order> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<Order>("Orders")); }
        }
        private ObjectSet<Order> _orders;
    
        public ObjectSet<OrderItem> OrderItems
        {
            get { return _orderItems  ?? (_orderItems = CreateObjectSet<OrderItem>("OrderItems")); }
        }
        private ObjectSet<OrderItem> _orderItems;
    
        public ObjectSet<Stock> Stocks
        {
            get { return _stocks  ?? (_stocks = CreateObjectSet<Stock>("Stocks")); }
        }
        private ObjectSet<Stock> _stocks;
    
        public ObjectSet<LoginCredential> LoginCredentials
        {
            get { return _loginCredentials  ?? (_loginCredentials = CreateObjectSet<LoginCredential>("LoginCredentials")); }
        }
        private ObjectSet<LoginCredential> _loginCredentials;
    
        public ObjectSet<Media> Media
        {
            get { return _media  ?? (_media = CreateObjectSet<Media>("Media")); }
        }
        private ObjectSet<Media> _media;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;

        #endregion

    }
}
